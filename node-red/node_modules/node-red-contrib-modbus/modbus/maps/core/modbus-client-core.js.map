{"version":3,"sources":["core/modbus-client-core.js"],"names":["require","install","de","biancoroyal","modbus","core","client","internalDebug","internalDebugFSM","modbusSerialDebug","XStateFSM","stateLogEnabled","networkErrors","this","id","states","on","INIT","BREAK","STOP","broken","createStateMachineService","ACTIVATE","RECONNECT","reconnecting","createMachine","initial","OPENSERIAL","CONNECT","FAILURE","SWITCH","opened","CLOSE","connected","QUEUE","queueing","SEND","READ","empty","sending","WRITE","reading","writing","closed","failed","switch","stopped","NEW","getActualUnitId","node","msg","Number","isInteger","payload","unitid","queueUnitId","parseInt","unit_id","startStateService","toggleMachine","interpret","start","checkUnitId","clientType","getLogFunction","EMPTY","activateSendingOnSuccess","cb","cberr","resp","activateSending","then","err","stateService","send","activateSendingOnFailure","readModbusByFunctionCodeOne","coreClient","address","quantity","Error","message","readModbusByFunctionCodeTwo","readDiscreteInputs","modbusErrorHandling","readModbusByFunctionCodeThree","readHoldingRegisters","readModbusByFunctionCodeFour","readInputRegisters","readModbusByFunctionCode","nodeLog","fc","readModbus","_port","_client","readable","setTimeout","timeout","getTimeout","state","value","clienttype","clientTimeout","writeCoil","writeModbusByFunctionCodeFifteen","length","writeModbusByFunctionCodeSix","writeRegister","writeModbusByFunctionCodeSixteen","delayTime","getID","connectClient","writeModbus","queueLog","writable","JSON","stringify","info","setUnitIdFromPayload","writeModbusByFunctionCodeFive","writeCoils","tcpHost","tcpPort","tcpType","setNewSerialNodeSettings","serialPort","serialBaudrate","serialDatabits","serialStopbits","serialParity","serialType","serialAsciiResponseStartDelimiter","serialConnectionDelay","setNewNodeOptionalSettings","writeRegisters","unitId","commandDelay","reconnectTimeout","setNewNodeSettings","connectorType","toUpperCase","setNewTCPNodeSettings","bufferCommands","messagesAllowedStates","module","exports"],"mappings":"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","file":"../../core/modbus-client-core.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n */\n'use strict'\nrequire('source-map-support').install()\n\n// eslint-disable-next-line no-var\nvar de = de || { biancoroyal: { modbus: { core: { client: {} } } } } // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebug = de.biancoroyal.modbus.core.client.internalDebug || require('debug')('contribModbus:core:client') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.internalDebugFSM = de.biancoroyal.modbus.core.client.internalDebugFSM || require('debug')('contribModbus:core:client:fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.modbusSerialDebug = de.biancoroyal.modbus.core.client.modbusSerialDebug || require('debug')('modbus-serial') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.XStateFSM = de.biancoroyal.modbus.core.client.XStateFSM || require('@xstate/fsm') // eslint-disable-line no-use-before-define\nde.biancoroyal.modbus.core.client.stateLogEnabled = de.biancoroyal.modbus.core.client.stateLogEnabled || false // eslint-disable-line no-use-before-define\n\nde.biancoroyal.modbus.core.client.networkErrors = ['ESOCKETTIMEDOUT', 'ETIMEDOUT', 'ECONNRESET', 'ENETRESET',\n  'ECONNABORTED', 'ECONNREFUSED', 'ENETUNREACH', 'ENOTCONN',\n  'ESHUTDOWN', 'EHOSTDOWN', 'ENETDOWN', 'EWOULDBLOCK', 'EAGAIN', 'EHOSTUNREACH']\n\nde.biancoroyal.modbus.core.client.createStateMachineService = function () {\n  this.stateLogEnabled = false\n\n  // failure is a general gate point in states to jump between states\n  return this.XStateFSM.createMachine({\n    id: 'modbus',\n    initial: 'new',\n    states: {\n      new: {\n        on: { INIT: 'init', BREAK: 'broken', STOP: 'stopped' }\n      },\n      broken: {\n        on: { INIT: 'init', STOP: 'stopped', FAILURE: 'failed', ACTIVATE: 'activated', RECONNECT: 'reconnecting' }\n      },\n      reconnecting: {\n        on: { INIT: 'init', STOP: 'stopped' }\n      },\n      init: {\n        on: { OPENSERIAL: 'opened', CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      opened: {\n        on: { CONNECT: 'connected', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      connected: {\n        on: { CLOSE: 'closed', ACTIVATE: 'activated', QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' }\n      },\n      activated: {\n        on: {\n          READ: 'reading',\n          WRITE: 'writing',\n          QUEUE: 'queueing',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      queueing: {\n        on: {\n          ACTIVATE: 'activated',\n          SEND: 'sending',\n          READ: 'reading',\n          WRITE: 'writing',\n          EMPTY: 'empty',\n          BREAK: 'broken',\n          CLOSE: 'closed',\n          FAILURE: 'failed',\n          STOP: 'stopped',\n          SWITCH: 'switch'\n        }\n      },\n      empty: { on: { QUEUE: 'queueing', BREAK: 'broken', FAILURE: 'failed', CLOSE: 'closed', STOP: 'stopped', SWITCH: 'switch' } },\n      sending: { on: { ACTIVATE: 'activated', READ: 'reading', WRITE: 'writing', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped', SWITCH: 'switch' } },\n      reading: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      writing: { on: { ACTIVATE: 'activated', BREAK: 'broken', FAILURE: 'failed', STOP: 'stopped' } },\n      closed: { on: { FAILURE: 'failed', BREAK: 'broken', CONNECT: 'connected', RECONNECT: 'reconnecting', INIT: 'init', STOP: 'stopped', SWITCH: 'switch' } },\n      failed: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped', SWITCH: 'switch' } },\n      switch: { on: { CLOSE: 'closed', BREAK: 'broken', STOP: 'stopped' } },\n      stopped: { on: { NEW: 'new', STOP: 'stopped' } }\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.getActualUnitId = function (node, msg) {\n  if (msg.payload && Number.isInteger(msg.payload.unitid)) {\n    return parseInt(msg.payload.unitid)\n  } else if (Number.isInteger(msg.queueUnitId)) {\n    return parseInt(msg.queueUnitId)\n  } else {\n    return parseInt(node.unit_id) || 0\n  }\n}\n\nde.biancoroyal.modbus.core.client.startStateService = function (toggleMachine) {\n  return this.XStateFSM.interpret(toggleMachine).start()\n}\n\nde.biancoroyal.modbus.core.client.checkUnitId = function (unitid, clientType) {\n  if (clientType === 'tcp') {\n    return unitid >= 0 && unitid <= 255\n  } else {\n    return unitid >= 0 && unitid <= 247\n  }\n}\n\nde.biancoroyal.modbus.core.client.getLogFunction = function (node) {\n  if (node.internalDebugLog) {\n    return node.internalDebugLog\n  } else {\n    return de.biancoroyal.modbus.core.client.internalDebug\n  }\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnSuccess = function (node, cb, cberr, resp, msg) {\n  node.activateSending(msg).then(function () {\n    cb(resp, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.activateSendingOnFailure = function (node, cberr, err, msg) {\n  node.activateSending(msg).then(function () {\n    cberr(err, msg)\n  }).catch(function (err) {\n    cberr(err, msg)\n  }).finally(function () {\n    node.stateService.send('ACTIVATE')\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeOne = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readCoils(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeTwo = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readDiscreteInputs(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeThree = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readHoldingRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCodeFour = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.readInputRegisters(parseInt(msg.payload.address), parseInt(msg.payload.quantity)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error(err.message), msg)\n    node.modbusErrorHandling(err)\n  })\n}\n\nde.biancoroyal.modbus.core.client.readModbusByFunctionCode = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  switch (parseInt(msg.payload.fc)) {\n    case 1:\n      coreClient.readModbusByFunctionCodeOne(node, msg, cb, cberr)\n      break\n    case 2:\n      coreClient.readModbusByFunctionCodeTwo(node, msg, cb, cberr)\n      break\n    case 3:\n      coreClient.readModbusByFunctionCodeThree(node, msg, cb, cberr)\n      break\n    case 4:\n      coreClient.readModbusByFunctionCodeFour(node, msg, cb, cberr)\n      break\n    default:\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n      nodeLog('Function Code Unknown %s', msg.payload.fc)\n      break\n  }\n}\n\nde.biancoroyal.modbus.core.client.readModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Reading Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.readable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('READ')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'read msg via Modbus',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      coreClient.readModbusByFunctionCode(node, msg, cb, cberr)\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFive = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (msg.payload.value) {\n    msg.payload.value = true\n  } else {\n    msg.payload.value = false\n  }\n  node.client.writeCoil(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeFifteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to coil payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeCoils(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSix = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  node.client.writeRegister(parseInt(msg.payload.address), parseInt(msg.payload.value)).then(function (resp) {\n    coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n  }).catch(function (err) {\n    if (node.client.getID() === 0) {\n      const resp = {\n        address: parseInt(msg.payload.address),\n        value: parseInt(msg.payload.value)\n      }\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    } else {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      node.modbusErrorHandling(err)\n    }\n  })\n}\n\nde.biancoroyal.modbus.core.client.writeModbusByFunctionCodeSixteen = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  if (parseInt(msg.payload.value.length) !== parseInt(msg.payload.quantity)) {\n    coreClient.activateSendingOnFailure(node, cberr, new Error('Quantity should be less or equal to register payload array length: ' +\n      msg.payload.value.length + ' Addr: ' + msg.payload.address + ' Q: ' + msg.payload.quantity), msg)\n  } else {\n    node.client.writeRegisters(parseInt(msg.payload.address), msg.payload.value).then(function (resp) {\n      coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n    }).catch(function (err) {\n      if (node.client.getID() === 0) {\n        const resp = {\n          address: parseInt(msg.payload.address),\n          value: parseInt(msg.payload.value)\n        }\n        coreClient.activateSendingOnSuccess(node, cb, cberr, resp, msg)\n      } else {\n        coreClient.activateSendingOnFailure(node, cberr, err, msg)\n        node.modbusErrorHandling(err)\n      }\n    })\n  }\n}\n\nde.biancoroyal.modbus.core.client.writeModbus = function (node, msg, cb, cberr) {\n  const coreClient = de.biancoroyal.modbus.core.client\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  let delayTime = 1\n  if (!node.client) {\n    nodeLog('Client Not Ready As Object On Writing Modbus')\n    return\n  }\n\n  if (node.client._port && node.client._port._client && !node.client._port._client.writable) {\n    if (!node.connectClient()) {\n      coreClient.activateSendingOnFailure(node, cberr, new Error('Modbus-Read Error from client connecting'), msg)\n      return\n    }\n    delayTime = 500\n  }\n\n  setTimeout(function () {\n    if (!node.bufferCommands) {\n      if (node.clienttype !== 'tcp') {\n        node.stateService.send('WRITE')\n      }\n    } else {\n      node.queueLog(JSON.stringify({\n        info: 'write msg',\n        message: msg.payload,\n        queueUnitId: msg.queueUnitId,\n        timeout: node.client.getTimeout(),\n        state: node.actualServiceState.value\n      }))\n    }\n\n    node.setUnitIdFromPayload(msg)\n    node.client.setTimeout(node.clientTimeout)\n\n    try {\n      switch (parseInt(msg.payload.fc)) {\n        case 15: // FC: 15\n          coreClient.writeModbusByFunctionCodeFifteen(node, msg, cb, cberr)\n          break\n        case 5: // FC: 5\n          coreClient.writeModbusByFunctionCodeFive(node, msg, cb, cberr)\n          break\n        case 16: // FC: 16\n          coreClient.writeModbusByFunctionCodeSixteen(node, msg, cb, cberr)\n          break\n        case 6: // FC: 6\n          coreClient.writeModbusByFunctionCodeSix(node, msg, cb, cberr)\n          break\n        default:\n          coreClient.activateSendingOnFailure(node, cberr, new Error('Function Code Unknown'), msg)\n          nodeLog('Function Code Unknown %s', msg.payload.fc)\n          break\n      }\n    } catch (err) {\n      coreClient.activateSendingOnFailure(node, cberr, err, msg)\n      nodeLog(err.message)\n      node.modbusErrorHandling(err)\n    }\n  }, delayTime)\n}\n\nde.biancoroyal.modbus.core.client.setNewTCPNodeSettings = function (node, msg) {\n  node.clienttype = 'tcp'\n  node.tcpHost = msg.payload.tcpHost || node.tcpHost\n  node.tcpPort = msg.payload.tcpPort || node.tcpPort\n  node.tcpType = msg.payload.tcpType || node.tcpType\n}\n\nde.biancoroyal.modbus.core.client.setNewSerialNodeSettings = function (node, msg) {\n  if (msg.payload.serialPort) {\n    node.serialPort = msg.payload.serialPort || node.serialPort\n  }\n\n  if (msg.payload.serialBaudrate) {\n    node.serialBaudrate = parseInt(msg.payload.serialBaudrate) || node.serialBaudrate\n  }\n\n  node.clienttype = 'serial'\n  node.serialDatabits = msg.payload.serialDatabits || node.serialDatabits\n  node.serialStopbits = msg.payload.serialStopbits || node.serialStopbits\n  node.serialParity = msg.payload.serialParity || node.serialParity\n  node.serialType = msg.payload.serialType || node.serialType\n\n  // Make sure is parsed when string, otherwise just assign.\n  if (msg.payload.serialAsciiResponseStartDelimiter && typeof msg.payload.serialAsciiResponseStartDelimiter === 'string') {\n    node.serialAsciiResponseStartDelimiter = parseInt(msg.payload.serialAsciiResponseStartDelimiter, 16)\n  } else {\n    node.serialAsciiResponseStartDelimiter = msg.payload.serialAsciiResponseStartDelimiter || node.serialAsciiResponseStartDelimiter\n  }\n\n  if (msg.payload.serialConnectionDelay) {\n    node.serialConnectionDelay = parseInt(msg.payload.serialConnectionDelay) || node.serialConnectionDelay\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeOptionalSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n\n  try {\n    let unitId = parseInt(msg.payload.unitId)\n    if (!node.checkUnitId(unitId, node.clienttype)) {\n      unitId = node.unit_id\n    }\n    node.unit_id = unitId\n  } catch (err) {\n    nodeLog(err.message)\n  }\n\n  if (msg.payload.commandDelay) {\n    node.commandDelay = parseInt(msg.payload.commandDelay) || node.commandDelay\n  }\n\n  if (msg.payload.clientTimeout) {\n    node.clientTimeout = parseInt(msg.payload.clientTimeout) || node.clientTimeout\n  }\n\n  if (msg.payload.reconnectTimeout) {\n    node.reconnectTimeout = parseInt(msg.payload.reconnectTimeout) || node.reconnectTimeout\n  }\n}\n\nde.biancoroyal.modbus.core.client.setNewNodeSettings = function (node, msg) {\n  const nodeLog = de.biancoroyal.modbus.core.client.getLogFunction(node)\n  const coreClient = de.biancoroyal.modbus.core.client\n\n  if (!msg) {\n    nodeLog('New Connection message invalid.')\n    return false\n  }\n\n  switch (msg.payload.connectorType.toUpperCase()) {\n    case 'TCP':\n      coreClient.setNewTCPNodeSettings(node, msg)\n      nodeLog('New Connection TCP Settings ' + node.tcpHost + ' ' + node.tcpPort + ' ' + node.tcpType)\n      break\n\n    case 'SERIAL':\n      coreClient.setNewSerialNodeSettings(node, msg)\n      nodeLog('New Connection Serial Settings ' + node.serialPort + ' ' + node.serialBaudrate + ' ' + node.serialType)\n      break\n\n    default:\n      nodeLog('Unknown Dynamic Reconnect Type ' + msg.payload.connectorType)\n  }\n\n  coreClient.setNewNodeOptionalSettings(node, msg)\n\n  return true\n}\n\nde.biancoroyal.modbus.core.client.messagesAllowedStates = ['activated', 'queueing', 'sending', 'empty', 'connected']\n\nmodule.exports = de.biancoroyal.modbus.core.client\n"]}