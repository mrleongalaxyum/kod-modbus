{"version":3,"sources":["modbus-flex-write.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","nodes","registerType","config","createNode","this","name","internalDebugLog","showStatusActivities","showErrors","keepMsgProperties","verbose","bufferMessageList","node","verboseLogging","Map","server","modbusClient","initModbusClientEvents","onModbusWriteDone","resp","msg","payload","buildMessage","logMsgError","err","message","origMsg","getOriginalMessage","errorProtocolMsg","onModbusWriteError","setModbusError","JSON","parse","fc","unitid","address","parseInt","quantity","isValidModbusMsg","isValid","Number","isInteger","error","setMsgPayloadFromHTTPRequests","Object","prototype","hasOwnProperty","call","value","indexOf","topic","id","messageId","on","origMsgInput","invalidPayloadIn","client","inputMsg","newMsg","buildNewMessageObject","set","emit","httpMsg","buildNewMessage","setNodeStatusTo","done","actualServiceState","setNodeDefaultStatus"],"mappings":"aAYAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,mBAGMC,EAASD,QAAQ,sBAFvBA,EAAQA,QAAsBF,QAAtBE,CAAR,4BAgKAH,EAAIK,MAAMC,aAAa,oBA/JvB,SAAyBC,GAKvBP,EAAIK,MAAMG,WAAWC,KAAMF,GAE3BE,KAAKC,KAAOH,EAAOG,KALrBD,KAAME,qBAA0BJ,EAACK,qBAO/BH,KAAKI,WAAaN,EAAOM,WAJzBb,KAAIK,eAAiBE,EAAMA,eAE3BE,KAAKC,kBAALH,EAAAO,kBACAL,KAAKG,iBAAAA,EACLH,KAAKI,eAAaN,EAAOM,SAAzBE,QAGA,IAAKD,EAAAA,KAKAE,GAJLC,EAAKN,kBAAmBA,IAAAA,IACxBT,EAAKgB,gBAAoB,UAAUH,GAG9BC,EAAoBX,MAAIc,QAA7BZ,EAAAa,SACAlB,IAGAmB,EAAKA,kBAAcJ,GAInBf,EAHEoB,uBAAAL,EAAAI,GAKFJ,EAAKM,kBAAoB,SAAUC,EAAMC,GAHzCJ,EAAAA,sBACAnB,EAASoB,gBAAAA,eAA6BD,GAGpCJ,EAAIA,KAAKL,EAAAA,aAATK,EAA+BD,kBAAAS,EAAAC,QAAAF,EAAAC,IAK/BR,EAJEf,KAAQ,4BAOZe,EAJEA,iBAAiBU,SAAaV,EAAKD,GAC/BC,EAAJJ,YANFX,EAAA0B,YAAAX,EAAAY,EAAAJ,IAeAR,EAJIf,mBAAqBe,SAAWQ,EAAhCA,GACDR,EAAAN,iBAAAkB,EAAAC,SAHH,IAAAC,EAAA3B,EAAA4B,mBAAAf,EAAAD,kBAAAS,GASER,EAAKgB,iBAAiBJ,EAAKE,GAH7Bd,EAAKiB,mBAAqBjB,EAAUY,EAAKJ,GACvCR,EAAKN,eAAiBkB,EAAIC,EAA1BD,EAAAE,GACAd,EAAMc,KAAAA,6BAORd,EAJEf,WAASiC,SAAelB,GASxBQ,MARU,iBAAAA,EAAAC,UANZD,EAAAC,QAAAU,KAAAC,MAAAZ,EAAAC,UAUED,EAAIC,QAAOD,GAAIC,SAAXD,EAAuBC,QAAUY,IAKrCb,EAJEA,QAAIC,OAAeW,SAASZ,EAACC,QAA7Ba,QACDd,EAAAC,QAAAc,QAAAC,SAAAhB,EAAAC,QAAAc,SAKDf,EAAIC,QAAQgB,SAAWD,SAAShB,EAAIC,QAAQgB,UAHxChB,GAONT,EAJK0B,iBAAH,SAAgClB,GAChC,IAAAmB,GAAA,EA+BA,OAzBMC,OAAOC,UAAUrB,EAAIC,QAAQY,MAHb,IAAnBK,EAAAA,QAALL,IACE,IAAIM,EAAUlB,QAAdY,IAK6B,KAAnBb,EAAIC,QAAQY,IAHKZ,KAArBmB,EAAOC,QAAPR,MAKJrB,EAAK8B,MAAM,eAAgBtB,GAC3BmB,IAAW,IAGTA,GAIGG,OAAMD,UAAArB,EAAAC,QAAXc,UACA,GAAAI,EAAOlB,QAAPc,SACDf,EAAAC,QAAAc,SAAA,QAFCvB,EAAK8B,MAAM,oBAAqBtB,GAIlCmB,IAAW,IAMVA,GALOC,OAAOC,UAAUrB,EAAIC,QAAQgB,WAOrC,GAAOE,EAAAA,QAAPF,UA5BFjB,EAAAC,QAAAgB,UAAA,QAwBIzB,EAAK8B,MAAM,qBAAsBtB,GAOjCmB,IAACI,GAGGvB,GAHRR,EAAK+B,8BAM+B,SAAWvB,GAU7C,OARKwB,OAAAC,UAAAC,eAAAC,KAAA3B,EAAAC,QAAA,UAAA,iBAAAD,EAAAC,QAAA2B,QACF,SAAA5B,EAAAC,QAAA2B,OAAA,UAAA5B,EAAAC,QAAA2B,MACF5B,EAAAC,QAAA2B,MAAA,SAAA5B,EAAAC,QAAA2B,OACD,EAAO5B,EAAPC,QAAA2B,MAAAC,QAAA,OAXF7B,EAAAC,QAAA2B,MAAAjB,KAAAC,MAAAZ,EAAAC,QAAA2B,SAgBS5B,GAFTR,EAKIS,sBAAS,SAAAT,EAAAQ,GAJX,IAKI4B,EAAeH,EAAAA,cAJnB,MAKIX,CAJFgB,MAKM9B,EAAIC,OAHDT,EAAAuC,GADTC,UAAAA,EACA/B,QAKEgB,CACAe,MAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,QAAAA,SAAAA,EAAAA,QAAAA,MAAAA,EAAAA,QANOlB,OAAAd,EAAAC,QAAAa,OAHXD,GAAAb,EAAAC,QAAAY,GAFFE,QAAAf,EAAAC,QAAAc,QAUME,SAAUjB,EAAIC,QAAQgB,SAMvBgB,UAAAA,KAALzC,EAKEyC,GAAMC,QAAAA,SAAqBlC,GAJ3B,IAAIvB,EAAS0D,iBAAiBnC,IAASJ,EAAawC,OAApD,CAOM5C,EAAK0B,OAAiBmB,OAAAA,GAAWrC,GAFvC,IACE,IAKEJ,EACD0C,EAHOA,EAAS9C,EAAK+C,WAAAA,GACpB/C,EAAKD,iBAAkBiD,KACvB5C,EAAa6C,EAAKlB,8BAA4BzB,GAC/CwC,EAAA9C,EAAA+C,sBAAA/C,EAAAkD,GACDlD,EAAOY,kBAAKoC,IAAAF,EAAAN,UAAAvD,EAAAkE,gBAAAnD,EAAAH,kBAAAqD,EAAAJ,IACZ9C,EAAKgB,KAAAA,cAAsB0B,EAA3B1C,EAAAM,kBAAAN,EAAAiB,qBAED,MAAAL,GAFCZ,EAAKgB,iBAAiBJ,EAAK8B,GAI7BzD,EAASU,mBAATK,EAA+BY,EAAA8B,GAnBjC1C,EAAAL,sBAwBIV,EAAImE,gBAAmBC,EAAMC,mBAAAtD,MAIhCA,EAJDyC,GAAA,QAAA,SAAAY,GACEpE,EAASmE,gBAAgB,SAAUpD,GAKrCA,EAAKA,kBAAKL,QACRV,EAASsE,oBAAqBvD,EAA9BuC,GAAAc,KADGrD,EAAKL,sBAKRP,EAAMC,qBAAaW","file":"../modbus-flex-write.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus flexible Write node.\n * @module NodeRedModbusFlexWrite\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const internalDebugLog = require('debug')('contribModbus:flex:write')\n\n  function ModbusFlexWrite (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferMessageList = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusWriteDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('writing done', node)\n      }\n\n      node.send(mbCore.buildMessage(node.bufferMessageList, msg.payload, resp, msg))\n      node.emit('modbusFlexWriteNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusWriteError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexWriteNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg.payload === 'string') {\n        msg.payload = JSON.parse(msg.payload)\n      }\n\n      msg.payload.fc = parseInt(msg.payload.fc)\n      msg.payload.unitid = parseInt(msg.payload.unitid)\n      msg.payload.address = parseInt(msg.payload.address)\n      msg.payload.quantity = parseInt(msg.payload.quantity)\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.payload.fc) &&\n              (msg.payload.fc === 5 ||\n                msg.payload.fc === 6 ||\n                msg.payload.fc === 15 ||\n                msg.payload.fc === 16))) {\n        node.error('FC Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.address) &&\n              msg.payload.address >= 0 &&\n              msg.payload.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n            !(Number.isInteger(msg.payload.quantity) &&\n              msg.payload.quantity >= 1 &&\n              msg.payload.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.setMsgPayloadFromHTTPRequests = function (msg) {\n      /* HTTP requests for boolean and multiple data string [1,2,3,4,5] */\n      if (Object.prototype.hasOwnProperty.call(msg.payload, 'value') && typeof msg.payload.value === 'string') {\n        if (msg.payload.value === 'true' || msg.payload.value === 'false') {\n          msg.payload.value = (msg.payload.value === 'true')\n        } else {\n          if (msg.payload.value.indexOf(',') > -1) {\n            msg.payload.value = JSON.parse(msg.payload.value)\n          }\n        }\n      }\n      return msg\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          value: (Object.prototype.hasOwnProperty.call(msg.payload, 'value')) ? msg.payload.value : msg.payload,\n          unitid: msg.payload.unitid,\n          fc: msg.payload.fc,\n          address: msg.payload.address,\n          quantity: msg.payload.quantity,\n          messageId\n        }\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (mbBasics.invalidPayloadIn(msg) || !modbusClient.client) {\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg)\n      try {\n        const inputMsg = node.prepareMsg(origMsgInput)\n        if (node.isValidModbusMsg(inputMsg)) {\n          const httpMsg = node.setMsgPayloadFromHTTPRequests(inputMsg)\n          const newMsg = node.buildNewMessageObject(node, httpMsg)\n          node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, httpMsg, newMsg))\n          modbusClient.emit('writeModbus', newMsg, node.onModbusWriteDone, node.onModbusWriteError)\n        }\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-write', ModbusFlexWrite)\n}\n"]}