{"version":3,"sources":["modbus-flex-sequencer.js"],"names":["module","exports","RED","install","mbBasics","require","mbCore","internalDebugLog","nodes","registerType","config","createNode","this","mbIOCore","sequences","showStatusActivities","showErrors","ModbusFlexSequencer","connection","logIOActivities","ioFile","getNode","useIOForPayload","emptyMsgOnFail","node","verboseLogging","settings","setNodeStatusTo","server","modbusClient","registerForModbus","initModbusClientEvents","msg","data","resp","emit","err","logMsgError","onModbusReadError","message","origMsg","getOriginalMessage","bufferMessageList","errorProtocolMsg","JSON","parse","fc","unitid","parseInt","address","quantity","isValidModbusMsg","Number","isInteger","isValid","error","buildNewMessageObject","topic","id","messageId","getObjectId","payload","keepMsgProperties","on","client","origMsgInput","Object","assign","forEach","invalidSequencesIn","newMsg","set","onModbusReadDone","buildNewMessage","inputMsg","sendEmptyMsgOnFail","actualServiceState","deregisterForModbus","clear","done","setNodeDefaultStatus"],"mappings":"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","file":"../modbus-flex-sequencer.js","sourcesContent":["/**\n Copyright (c) 2016,2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a>Andrea Verardi</a> (Anversoft)\n */\n\n/**\n * Modbus Sequencer node.\n * @module NodeRedModbusFlexSequencer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const mbBasics = require('./modbus-basics')\n  const mbCore = require('./core/modbus-core')\n  const mbIOCore = require('./core/modbus-io-core')\n  const internalDebugLog = require('debug')('contribModbus:poller')\n\n  function ModbusFlexSequencer (config) {\n    RED.nodes.createNode(this, config)\n\n    this.name = config.name\n    this.sequences = config.sequences\n\n    this.showStatusActivities = config.showStatusActivities\n    this.showErrors = config.showErrors\n    this.connection = null\n\n    this.useIOFile = config.useIOFile\n    this.ioFile = RED.nodes.getNode(config.ioFile)\n    this.useIOForPayload = config.useIOForPayload\n    this.logIOActivities = config.logIOActivities\n\n    this.emptyMsgOnFail = config.emptyMsgOnFail\n    this.keepMsgProperties = config.keepMsgProperties\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferMessageList = new Map()\n    mbBasics.setNodeStatusTo('waiting', node)\n\n    const modbusClient = RED.nodes.getNode(config.server)\n    if (!modbusClient) {\n      return\n    }\n    modbusClient.registerForModbus(node)\n    mbBasics.initModbusClientEvents(node, modbusClient)\n\n    node.onModbusReadDone = function (resp, msg) {\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo('reading done', node)\n      }\n\n      node.send(mbIOCore.buildMessageWithIO(node, resp.data, resp, msg))\n      node.emit('modbusFlexSequencerNodeDone')\n    }\n\n    node.errorProtocolMsg = function (err, msg) {\n      if (node.showErrors) {\n        mbBasics.logMsgError(node, err, msg)\n      }\n    }\n\n    node.onModbusReadError = function (err, msg) {\n      node.internalDebugLog(err.message)\n      const origMsg = mbCore.getOriginalMessage(node.bufferMessageList, msg)\n      node.errorProtocolMsg(err, origMsg)\n      mbBasics.sendEmptyMsgOnFail(node, err, msg)\n      mbBasics.setModbusError(node, modbusClient, err, origMsg)\n      node.emit('modbusFlexSequencerNodeError')\n    }\n\n    node.prepareMsg = function (msg) {\n      if (typeof msg === 'string') {\n        msg = JSON.parse(msg)\n      }\n\n      switch (msg.fc) {\n        case 'FC1':\n          msg.fc = 1\n          break\n        case 'FC2':\n          msg.fc = 2\n          break\n        case 'FC3':\n          msg.fc = 3\n          break\n        case 'FC4':\n          msg.fc = 4\n          break\n      }\n\n      msg.unitid = parseInt(msg.unitid)\n      msg.address = parseInt(msg.address) || 0\n      msg.quantity = parseInt(msg.quantity) || 1\n\n      return msg\n    }\n\n    node.isValidModbusMsg = function (msg) {\n      let isValid = true\n\n      if (!(Number.isInteger(msg.unitid) &&\n          msg.unitid >= 0 &&\n          msg.unitid <= 255)) {\n        node.error('Unit ID Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.address) &&\n          msg.address >= 0 &&\n          msg.address <= 65535)) {\n        node.error('Address Not Valid', msg)\n        isValid &= false\n      }\n\n      if (isValid &&\n        !(Number.isInteger(msg.quantity) &&\n          msg.quantity >= 1 &&\n          msg.quantity <= 65535)) {\n        node.error('Quantity Not Valid', msg)\n        isValid &= false\n      }\n\n      return isValid\n    }\n\n    node.buildNewMessageObject = function (node, msg) {\n      const messageId = mbCore.getObjectId()\n      return {\n        topic: msg.topic || node.id,\n        messageId,\n        payload: {\n          name: msg.name,\n          unitid: msg.unitid,\n          fc: msg.fc,\n          address: msg.address,\n          quantity: msg.quantity,\n          emptyMsgOnFail: node.emptyMsgOnFail,\n          keepMsgProperties: node.keepMsgProperties,\n          messageId\n        }\n      }\n    }\n\n    node.on('input', function (msg) {\n      if (!modbusClient.client) {\n        return\n      }\n\n      const origMsgInput = Object.assign({}, msg)\n      const sequences = mbBasics.invalidSequencesIn(msg) ? node.sequences : msg.sequences\n\n      try {\n        sequences.forEach(msg => {\n          const inputMsg = node.prepareMsg(msg)\n          if (node.isValidModbusMsg(inputMsg)) {\n            const newMsg = node.buildNewMessageObject(node, inputMsg)\n            node.bufferMessageList.set(newMsg.messageId, mbBasics.buildNewMessage(node.keepMsgProperties, inputMsg, newMsg))\n            modbusClient.emit('readModbus', newMsg, node.onModbusReadDone, node.onModbusReadError)\n          }\n        })\n      } catch (err) {\n        node.errorProtocolMsg(err, origMsgInput)\n        mbBasics.sendEmptyMsgOnFail(node, err, origMsgInput)\n      }\n\n      if (node.showStatusActivities) {\n        mbBasics.setNodeStatusTo(modbusClient.actualServiceState, node)\n      }\n    })\n\n    node.on('close', function (done) {\n      mbBasics.setNodeStatusTo('closed', node)\n      node.bufferMessageList.clear()\n      modbusClient.deregisterForModbus(node.id, done)\n    })\n\n    if (!node.showStatusActivities) {\n      mbBasics.setNodeDefaultStatus(node)\n    }\n  }\n\n  RED.nodes.registerType('modbus-flex-sequencer', ModbusFlexSequencer)\n}\n"]}