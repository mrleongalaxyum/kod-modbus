{"version":3,"sources":["modbus-flex-server.js"],"names":["module","exports","RED","install","ModbusRTU","require","coreServer","internalDebugLog","nodes","registerType","config","VM","_require","VMScript","funcGetInputRegister","this","name","serverAddress","serverPort","ModbusFlexServer","parseInt","responseDelay","delayUnit","unitId","minAddress","splitAddress","showErrors","logEnabled","funcGetCoil","compile","funcGetDiscreteInput","funcGetHoldingRegister","funcSetCoil","node","msg","type","message","payload","registers","slice","bufferFactor","coils","disableMsgOutput","send","buildMessage","funcSetRegister","registersBufferSize","Buffer","alloc","coilsBufferSize","vector","vm","sandbox","run","startServer","modbusServer","host","ServerTCP","port","debug","unitID","error","err","on","warn","mbBasics","close","setNodeStatusTo","sock","_server","stringify","address","remoteAddress","remotePort","showStatusActivities","setNodeDefaultStatus","isValidMemoryMessage","writeToFlexServerMemory"],"mappings":"aAYAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,sBAAyBE,UAC9B,IAAAC,EAAAC,QAAA,iBAGMC,EAAaD,QAAQ,6BAF3BA,EAAQA,QAAA,mBAIFE,EAAmBF,QAAQ,QAARA,CAAiB,6BA2K1C,IACEH,EAtBSM,MAILC,aAAA,qBAxJN,SAA2BC,GAJ3BR,EAAMI,MAAAA,WAAaD,KAAQK,GAMzB,IAAQC,GAARC,EAAyBP,QAAQ,QAAzBM,GAAIE,EAAZD,EAAYC,SAePC,GAbLC,KAAKC,KAAON,EAAOM,KANrBD,KAAMR,WAAgBG,EAAGL,WAQvBU,KAAKE,cAAgBP,EAAOO,eAAiB,UAN/CF,KAAAG,WAASC,SAAkBT,EAAQQ,YACjChB,KAAIM,cAAiBY,SAAMV,EAA3BW,eAQAN,KAAKO,UAAYZ,EAAOY,UAPxBP,KAAAQ,OAAAH,SAAiCV,EAAjCa,SAAA,EAAAR,KAAQJ,WAAAA,SAARD,EAAAc,aAAA,EAAAT,KAAYF,aAAZO,SAAYP,EAAZY,eAAA,IAWAV,KAAKW,WAAahB,EAAOgB,WARzBX,KAAKY,YAAajB,IAAAA,EAAOiB,EAAzBC,aAAAC,UACAd,KAAKE,qBAAuBA,IAAAA,EAAPP,EAAwBoB,sBAA7CD,UACAd,KAAKG,qBAAsBR,IAAAA,EAAOQ,EAAlCJ,sBAAAe,UACAd,KAAKM,uBAAyBX,IAAAA,EAAOW,EAARU,wBAA7BF,UAEAd,KAAKQ,YAASH,IAASV,EAAOa,EAAhBS,aAAdH,UACAd,KAAKS,gBAAaJ,IAASV,EAAOc,EAAAA,iBAAlCK,UAEAd,KAAKW,iBAAmBnB,EAExBQ,KAAKa,eAAc1B,EAAIW,SAASH,QAE3BI,MAkIL,SATQmB,EAAJC,GAUF,MATID,CACD,CAAAE,KAAA,UAAAC,QAAAF,EAAAG,QAAAJ,EAAAK,UAAAC,MAAAN,EAAAR,aAAAnB,EAAAkC,eAUD,CAAEL,KAAM,QAASC,QAASF,EAAKG,QAASJ,EAAKQ,MAAMF,MAAM,EAAGN,EAAKR,aAAenB,EAAWkC,eAT3F,CAAAL,KAAQ,QAASO,QAAAA,EAAAA,QAAkBT,EAAAK,UAAAC,MAAA,EAAAN,EAAAR,aAAAnB,EAAAkC,eAWnC,CAVEP,KAAKU,WAAKC,QAAVV,EAAAG,QAAAJ,EAAAQ,MAAAF,MAAAN,EAAAR,aAAAnB,EAAAkC,eACD,CAAAH,QAAA,UAAAF,KAAA,UAAAC,QAAAF,IA7HLD,EAAKF,aAAAA,EAAyBS,aAG9BP,EAAKY,gBAAkBzB,SAAIP,EAASH,gBAAOmC,EAApBL,cAEvBP,EAAK1B,oBAAmBA,SAAAA,EAAxBuC,oBAAAxC,EAAAkC,cAGAP,EAAMA,MAAOc,OAAbC,MAAAf,EAAAgB,gBAAA,GACAhB,EAAKO,UAALO,OAAoBzC,MAAU2B,EAACO,oBAA/B,GAGAP,EAAKa,aAAAA,KAGLb,EAAKK,gBAAmBU,cAAWF,GAWnCb,EAAKiB,OAAS,IAMdC,EAHW,IAAAxC,EAAA,CAATyC,QAAWnB,CAAAA,KAAAA,MAGVoB,IAAI,yBAA2B3C,EAAOkB,aACzCuB,EAAGE,IAAI,kCAAoC3C,EAAOoB,sBAClDqB,EAAGE,IAAI,kCAAoC3C,EAAOI,sBAClDqC,EAAGE,IAAI,oCAAsC3C,EAAOqB,wBAGpDoB,EAAGE,IAAI,yBAAA3C,EAA+BA,aAAtCyC,EAAGE,IAAI,6BAA+B3C,EAAOmC,iBAE7CZ,EACEqB,YAAI,WAAJ,IACE,GACM,OAAJrB,EAAIsB,aAAA,CAAJ,IACEtB,EACEuB,aAAWvC,IAAAA,EAD4CwC,UAAAxB,EAAAiB,OAAA,CAEvDQ,KAAMzB,EAAKf,cACXyC,KAAK1B,EAAMf,WACX0C,MAAM3B,EAAMN,WAJdiC,OAAA3B,EAAAV,SAOAU,MAAK4B,GAAL5B,EAAkBI,MAASyB,EAAA,CAAAzB,QAAA,0EAG7BJ,EAAKsB,aAAaQ,GAAG,cAAe,SAAUD,GAA9C7B,EAAkB8B,EAAG3B,SACnB7B,EAAAA,YAEE0B,EAAK+B,KAAKF,GAEZG,EAFOD,gBAAL,QAAA/B,GAIFA,EAAKsB,aAAaW,MAAM,WAFxBD,EAAAA,kBAKDhC,EAVDsB,aAAAQ,GAAA,QAAA,SAAAD,GAYA7B,EAAkB8B,4BAChBxD,EAAAA,YAEE0B,EAAK4B,MAAMC,GAEbG,EAFOJ,gBAAL,QAAA5B,KAKJA,EAHEgC,aAASE,QAATJ,GAAyB,aAAzB,SAAAK,GALF7D,EAAA,wCAUM6D,GAFF7D,EAAc8D,gCAAmCD,KAAME,UAAAF,EAAAG,WAAA,SAAAH,EAAAI,cAAA,IAAAJ,EAAAK,YAKzDR,EAASE,gBAAgB,SAAUlC,KAGrCA,EAJGsB,aAAAc,QAAAN,GAAA,QAAA,SAAAD,GAKDvD,EAAiB,mCAJjB0D,EAASE,YALXlC,EAAA4B,MAAAC,GAQA7B,EAAKsB,gBAAqBQ,QAA1B9B,KASGA,EANKyC,sBAORT,EANGU,qBAAA1C,GAQL,MAPIgC,GAQJ1D,EAbEuD,EAAA1B,SAODH,EAAAP,YAQCO,EAAK+B,KAAKF,GAEZG,EAPEA,gBAASU,QAAqB1C,GAGXG,MAArB7B,EAAAA,cAQAA,EAAiB,4CAA8C0B,EAAKhB,cAAgB,IAAMgB,EAAKf,YAP/F+C,EAASvC,gBAAY,cAAAO,KAEpB1B,EAAA,kCASD0D,EAASE,gBAAgB,QAASlC,KAItCA,EATEqB,cAWFrB,EATIgC,GAAAA,QAASE,SAAAA,GAFX7D,EAGOsE,qBAAA1C,IACL3B,EAAAA,wBAAiB0B,EAAAC,GACiBD,IAAlCgC,EAAQ5B,QAAC8B,kBACVlC,EAAAU,KAAAC,EAAAV,MAGEoB,EAAAA,YAEAS,EAAGF,MAAS,gDAAe3B,GAE5B5B,EAAAA,QAAWuE,kBAST5C,EAAKU,KAAKC,EAAaV,OAK7BD,EAAA8B,GAAA,QAASnB,WACPqB,EACEE,gBAAA,SAAAlC,GAAEE,EAAMoB,aAARc,SAAmBjC,EAAAA,aAAnBiC,QAAAH,QACAjC,EAAAsB,cAAEpB,EAAIoB,aAANW,QAeFjC,EAfiCI,aAAcI,SAqBjD,MAnBMN,GAoBN5B,EApBIuD,EAAA1B","file":"../modbus-flex-server.js","sourcesContent":["/**\n Copyright (c) 2017,2018,2019,2020,2021,2022 Klaus Landsdorf (http://node-red.plus/)\n All rights reserved.\n node-red-contrib-modbus - The BSD 3-Clause License\n\n @author <a href=\"mailto:klaus.landsdorf@bianco-royal.de\">Klaus Landsdorf</a> (Bianco Royal)\n **/\n\n/**\n * Modbus Server node.\n * @module NodeRedModbusServer\n *\n * @param RED\n */\nmodule.exports = function (RED) {\n  'use strict'\n  require('source-map-support').install()\n  const ModbusRTU = require('modbus-serial')\n  const coreServer = require('./core/modbus-server-core')\n  const mbBasics = require('./modbus-basics')\n  const internalDebugLog = require('debug')('contribModbus:flex:server')\n\n  function ModbusFlexServer (config) {\n    RED.nodes.createNode(this, config)\n    const { VM, VMScript } = require('vm2')\n\n    this.name = config.name\n    this.logEnabled = config.logEnabled\n    this.serverAddress = config.serverAddress || '0.0.0.0'\n    this.serverPort = parseInt(config.serverPort)\n    this.responseDelay = parseInt(config.responseDelay)\n    this.delayUnit = config.delayUnit\n    this.unitId = parseInt(config.unitId) || 1\n    this.minAddress = parseInt(config.minAddress) || 0\n    this.splitAddress = parseInt(config.splitAddress) || 10000\n    this.showErrors = config.showErrors\n\n    this.funcGetCoil = new VMScript(config.funcGetCoil).compile()\n    this.funcGetDiscreteInput = new VMScript(config.funcGetDiscreteInput).compile()\n    this.funcGetInputRegister = new VMScript(config.funcGetInputRegister).compile()\n    this.funcGetHoldingRegister = new VMScript(config.funcGetHoldingRegister).compile()\n\n    this.funcSetCoil = new VMScript(config.funcSetCoil).compile()\n    this.funcSetRegister = new VMScript(config.funcSetRegister).compile()\n\n    this.internalDebugLog = internalDebugLog\n    this.verboseLogging = RED.settings.verbose\n\n    const node = this\n    node.bufferFactor = coreServer.bufferFactor\n\n    node.coilsBufferSize = parseInt(config.coilsBufferSize * coreServer.bufferFactor)\n    node.registersBufferSize = parseInt(config.registersBufferSize * coreServer.bufferFactor)\n\n    node.coils = Buffer.alloc(node.coilsBufferSize, 0)\n    node.registers = Buffer.alloc(node.registersBufferSize, 0)\n\n    node.modbusServer = null\n\n    mbBasics.setNodeStatusTo('initialized', node)\n\n    //     1...10000*  address - 1      Coils (outputs)    0   Read/Write\n    // 10001...20000*  address - 10001  Discrete Inputs    01  Read\n    // 30001...40000*  address - 30001  Input Registers    04  Read\n    // 40001...50000*  address - 40001  Holding Registers  03  Read/Write\n\n    node.vector = {}\n\n    const vm = new VM({\n      sandbox: { node }\n    })\n\n    vm.run('node.vector.getCoil = ' + config.funcGetCoil)\n    vm.run('node.vector.getDiscreteInput = ' + config.funcGetDiscreteInput)\n    vm.run('node.vector.getInputRegister = ' + config.funcGetInputRegister)\n    vm.run('node.vector.getHoldingRegister = ' + config.funcGetHoldingRegister)\n\n    vm.run('node.vector.setCoil = ' + config.funcSetCoil)\n    vm.run('node.vector.setRegister = ' + config.funcSetRegister)\n\n    node.startServer = function () {\n      try {\n        if (node.modbusServer === null) {\n          try {\n            node.modbusServer = new ModbusRTU.ServerTCP(node.vector, {\n              host: node.serverAddress,\n              port: node.serverPort,\n              debug: node.logEnabled,\n              unitID: node.unitId\n            })\n          } catch (err) {\n            node.error(err, { payload: 'server net error -> for port 502 on unix, you have to be a super user' })\n          }\n\n          node.modbusServer.on('socketError', function (err) {\n            internalDebugLog(err.message)\n            if (node.showErrors) {\n              node.warn(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n\n            node.modbusServer.close(function () {\n              node.startServer()\n            })\n          })\n\n          node.modbusServer.on('error', function (err) {\n            internalDebugLog('Modbus Flex Server error')\n            if (node.showErrors) {\n              node.error(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n          })\n\n          node.modbusServer._server.on('connection', function (sock) {\n            internalDebugLog('Modbus Flex Server client connection')\n            if (sock) {\n              internalDebugLog('Modbus Flex Server client to ' + JSON.stringify(sock.address()) + ' from ' + sock.remoteAddress + ' ' + sock.remotePort)\n            }\n            mbBasics.setNodeStatusTo('active', node)\n          })\n\n          node.modbusServer._server.on('error', function (err) {\n            internalDebugLog('Modbus Flex Server client error')\n            if (node.showErrors) {\n              node.error(err)\n            }\n            mbBasics.setNodeStatusTo('error', node)\n          })\n        }\n\n        if (!node.showStatusActivities) {\n          mbBasics.setNodeDefaultStatus(node)\n        }\n      } catch (err) {\n        internalDebugLog(err.message)\n        if (node.showErrors) {\n          node.warn(err)\n        }\n        mbBasics.setNodeStatusTo('error', node)\n      }\n\n      if (node.modbusServer != null) {\n        internalDebugLog('Modbus Flex Server listening on modbus://' + node.serverAddress + ':' + node.serverPort)\n        mbBasics.setNodeStatusTo('initialized', node)\n      } else {\n        internalDebugLog('Modbus Flex Server isn\\'t ready')\n        mbBasics.setNodeStatusTo('error', node)\n      }\n    }\n\n    node.startServer()\n\n    node.on('input', function (msg) {\n      if (coreServer.isValidMemoryMessage(msg)) {\n        coreServer.writeToFlexServerMemory(node, msg)\n        if (msg.payload.disableMsgOutput !== 1) {\n          node.send(buildMessage(msg))\n        }\n      } else {\n        if (node.showErrors) {\n          node.error('Is Not A Valid Memory Write Message To Server', msg)\n        }\n        if (!msg.payload.disableMsgOutput) {\n          node.send(buildMessage(msg))\n        }\n      }\n    })\n\n    function buildMessage (msg) {\n      return [\n        { type: 'holding', message: msg, payload: node.registers.slice(node.splitAddress * coreServer.bufferFactor) },\n        { type: 'coils', message: msg, payload: node.coils.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'input', message: msg, payload: node.registers.slice(0, node.splitAddress * coreServer.bufferFactor) },\n        { type: 'discrete', message: msg, payload: node.coils.slice(node.splitAddress * coreServer.bufferFactor) },\n        { payload: 'request', type: 'message', message: msg }\n      ]\n    }\n\n    node.on('close', function () {\n      mbBasics.setNodeStatusTo('closed', node)\n      if (node.modbusServer._server) {\n        node.modbusServer._server.close()\n      }\n      if (node.modbusServer) {\n        node.modbusServer.close()\n      }\n      node.modbusServer = null\n    })\n  }\n\n  try {\n    RED.nodes.registerType('modbus-flex-server', ModbusFlexServer)\n  } catch (err) {\n    internalDebugLog(err.message)\n  }\n}\n"]}